package GUI;

import Database.VirtualPetDatabase;
import World.Owner;
import World.Output;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;


/**
 *
 * @author Akansha Sen and Kelly Luo
 */
public class ActiveGame extends JFrame implements ActionListener
{
    public Owner owner;
    public Output op;
    public boolean notEndOfGame = true;
    public boolean buttonWaiting;
    public int seconds = 0;
    private VirtualPetDatabase database;
    private Semaphore sem;
    
    public static JFrame petFrame = new JFrame("The Virtual Pet Game");
    
    public void startRunningGame(){
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                do {
                    op.notEndOfGame = op.checkEndOfGame();
                    if (op.notEndOfGame == false) {
                        database.closeDatabase();
                        System.exit(0);
                    }

                    op.updateStatus();
                } while (op.notEndOfGame);
            }
        });

        Thread t2 = new Thread(new Runnable() {
            public void run() {
                do {
                    op.notEndOfGame = op.checkEndOfGame();
                    if (op.notEndOfGame == false) {
                        database.closeDatabase();
                        System.exit(0);
                    }

                    op.askUserToInput();
                } while (op.notEndOfGame);
            }
        });
        t1.start();
        t2.start();
    }
    
    public void setFields(){
        this.ownerNameTextArea.setText(op.owner.getOwnerName());
        this.petNameTextArea.setText(op.owner.pet.getName());
        this.repaint();
    }
    
    /**
     * Creates new form JFramePet
     */
    public ActiveGame(Owner owner, VirtualPetDatabase database) 
    {
        this.database = database;
        op = new Output(owner);
        sem = new Semaphore(1);
        initComponents();
        this.setFields();
        this.startRunningGame();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        yourPetTitle = new javax.swing.JLabel();
        titleOfGui = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        healthProgressBar = new javax.swing.JProgressBar();
        feedTreatButton = new javax.swing.JButton();
        petButton = new javax.swing.JButton();
        hungryProgressBar = new javax.swing.JProgressBar();
        hungryPointsLabel = new javax.swing.JLabel();
        displayPetName1 = new javax.swing.JScrollPane();
        ownerNameTextArea = new javax.swing.JTextArea();
        happyPointsLabel = new javax.swing.JLabel();
        displayPetName = new javax.swing.JScrollPane();
        petNameTextArea = new javax.swing.JTextArea();
        petNameLabel = new javax.swing.JLabel();
        sleepButton = new javax.swing.JButton();
        feedFoodButton = new javax.swing.JButton();
        happinessProgressBar = new javax.swing.JProgressBar();
        quitButton = new javax.swing.JButton();
        ownerNameLabel = new javax.swing.JLabel();
        takeWalkButton = new javax.swing.JButton();
        fatiguePointsLabel = new javax.swing.JLabel();
        happinessProgressBar1 = new javax.swing.JProgressBar();
        petAgeLabel = new javax.swing.JLabel();
        imgLabel = new javax.swing.JLabel();
        displayPanel = new javax.swing.JPanel();
        helpButton = new javax.swing.JButton();
        displayPetName2 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        yourPetTitle.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        yourPetTitle.setText("Your Pet");

        titleOfGui.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleOfGui.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleOfGui.setText("Virtual Pet");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("Activities");

        healthProgressBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        feedTreatButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        feedTreatButton.setText("Feed Treat");
        feedTreatButton.addActionListener(this);

        petButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        petButton.setText("Pet");
        petButton.addActionListener(this);

        hungryProgressBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        hungryPointsLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hungryPointsLabel.setText("Hungry Points");

        ownerNameTextArea.setColumns(20);
        ownerNameTextArea.setRows(5);
        displayPetName1.setViewportView(ownerNameTextArea);
        ownerNameTextArea.setEditable(false);

        happyPointsLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        happyPointsLabel.setText("Happy Points");

        petNameTextArea.setColumns(20);
        petNameTextArea.setRows(5);
        displayPetName.setViewportView(petNameTextArea);
        petNameTextArea.setEditable(false);

        petNameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        petNameLabel.setText("Name of Pet");

        sleepButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sleepButton.setText("Sleep");
        sleepButton.addActionListener(this);

        feedFoodButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        feedFoodButton.setText("Feed Food");
        feedFoodButton.addActionListener(this);

        happinessProgressBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        quitButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        quitButton.setText("Quit");
        quitButton.addActionListener(this);

        ownerNameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ownerNameLabel.setText("Owner Name");

        takeWalkButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        takeWalkButton.setText("Take Walk");
        takeWalkButton.addActionListener(this);

        fatiguePointsLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fatiguePointsLabel.setText("Fatigue Points");

        happinessProgressBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        petAgeLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        petAgeLabel.setText("Pet Age");

        displayPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        imgLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/MayaHappy.gif"))); // NOI18N
        imgLabel.setLabelFor(displayPanel);
        
        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(imgLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        helpButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        helpButton.setText("Help");
        helpButton.addActionListener(this);

        outputTextArea.setColumns(20);
        outputTextArea.setRows(20);
        displayPetName2.setViewportView(outputTextArea);
        outputTextArea.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(yourPetTitle)
                        .addGap(266, 266, 266)
                        .addComponent(titleOfGui, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(displayPetName2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(displayPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(80, 80, 80)
                                                .addComponent(fatiguePointsLabel))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(petNameLabel)))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(displayPetName)
                                            .addComponent(healthProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(hungryPointsLabel)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(hungryProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(petAgeLabel)
                                                            .addComponent(happyPointsLabel))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(happinessProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(happinessProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(4, 4, 4))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(sleepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(feedTreatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(petButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel1))
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGap(64, 64, 64)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                    .addComponent(takeWalkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(feedFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                                .addGap(80, 80, 80)))))
                                .addGap(1, 1, 1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(ownerNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(displayPetName1)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleOfGui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(yourPetTitle)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(ownerNameLabel))
                            .addComponent(displayPetName1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(petNameLabel)
                            .addComponent(displayPetName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fatiguePointsLabel)
                                    .addComponent(healthProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addComponent(hungryPointsLabel))
                            .addComponent(hungryProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(happyPointsLabel)
                            .addComponent(happinessProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(petAgeLabel)
                            .addComponent(happinessProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sleepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(feedFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(takeWalkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(feedTreatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(petButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(displayPetName2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        
        buttons = new JButton[]{feedFoodButton,feedTreatButton,petButton,sleepButton,takeWalkButton};

        pack();
    }// </editor-fold>                                                                  
    
        
    @Override
    public void actionPerformed(ActionEvent event) {
        
        Object source = event.getSource();
        
        if(source == feedFoodButton)
        {
            outputTextArea.append(op.feedFood());
            sem.release();
        }
        
        else if(source == feedTreatButton)
        {
            outputTextArea.append(op.feedTreat());
        }
        
        else if(source == sleepButton)
        {
            outputTextArea.append(op.sleep());
        }
        
        else if(source ==  petButton)
        {
            outputTextArea.append(op.pet());
        }
        
        else if(source ==  takeWalkButton)
        {
            outputTextArea.append(op.takeWalk());
        }
        
        else if(source ==  quitButton)
        {
            this.database.closeDatabase();
            System.exit(0);
        }
        
        else if(source ==  helpButton)
        {
            try {
                outputTextArea.append(op.help());
            } catch (IOException ex) {
                Logger.getLogger(ActiveGame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
    
     /**
     * This is the update status method of the output class, this updates the 
     * status of the pet depending on the inputs done by the owner of the pet,
     * this update happens every (shown below) seconds, for example, every one 
     * second the hungry points of the pet goes up,
     * 
     * finally the method uses the toString method to print out all the
     * updates information about the pet.
     */
    public synchronized void updateStatus() {
        if (sem.tryAcquire()) { // true means waiting for button press
            try {
                wait();
            } catch (InterruptedException ex) {
                Logger.getLogger(Output.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        while (op.notEndOfGame) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Output.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            for (JButton btn : buttons) {
                btn.setEnabled(false);
            }
            
            this.op.seconds++;
            if (this.op.seconds % 5 == 0) { // 5 seconds
                break;
            }
            if (this.op.seconds % 1 == 0) { // 1 second
                this.op.owner.pet.setHungryPoints(this.op.owner.pet.getHungryPoints() + 1);

                if (this.op.owner.pet.getHungryPoints() > 10) {
                    outputTextArea.append(this.owner.pet.getName() + " is hungry so has increased 1 fatigue point.");
                    this.owner.pet.setFatiguePoints(this.owner.pet.getFatiguePoints() + 1);
                } else if (this.owner.pet.getHungryPoints() <= 40) {
                    outputTextArea.append(owner.pet.getName() + " is happy so has increased 1 happiness point.");
                    this.owner.pet.setHappinessPoints(this.owner.pet.getHappinessPoints() + 1);
                }
            }
            if (this.op.seconds % 9 == 0) { // lucky or unlucky event
                outputTextArea.append(this.owner.pet.pickEvent());

            }
            if(this.op.seconds % 9 == 0){ 
                this.owner.pet.setAge(this.owner.pet.getAge() + 1);
                outputTextArea.append(this.owner.pet.getName() + " has increased in age by 1.");
            }
        }
        outputTextArea.append(owner.pet.toString());

        this.buttonWaiting = true;
        notify();
    }

     /**
     * This method will wait if the owner is not inputting anything,
     * if not, then it will run the process input method, and set the input
     * boolean to false, notifies all other threads.
     */
    public synchronized void askUserToInput() {
        if (!sem.tryAcquire()) {
            try {
                wait();
            } catch (InterruptedException ex) {
                Logger.getLogger(Output.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        for (JButton btn : buttons) {
                btn.setEnabled(true);
        }
        
        sem.release();
    }
    
    /**
     * A method to check if the game has end by winning or losing
     * @return boolean for if the game has ended
     */
    public boolean checkEndOfGame() {
        boolean gameInProgress = true;
        
        if (this.owner.pet.getFatiguePoints() >= 50) {
                System.out.println("Awwwww noooo.... You lost the game... Your pet got too tired");
                gameInProgress = false;

            } else if (this.owner.pet.getHappinessPoints() >= 20) {
                System.out.println("YOU WON! YOU KEPT YOUR PET HAPPY! YOU ARE AMAZING!! :D");
                gameInProgress = false;
            }
        
        return gameInProgress;  
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel displayPanel;
    private javax.swing.JScrollPane displayPetName;
    private javax.swing.JScrollPane displayPetName1;
    private javax.swing.JScrollPane displayPetName2;
    private javax.swing.JLabel fatiguePointsLabel;
    private javax.swing.JButton feedFoodButton;
    private javax.swing.JButton feedTreatButton;
    private javax.swing.JProgressBar happinessProgressBar;
    private javax.swing.JProgressBar happinessProgressBar1;
    private javax.swing.JLabel happyPointsLabel;
    private javax.swing.JProgressBar healthProgressBar;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel hungryPointsLabel;
    private javax.swing.JProgressBar hungryProgressBar;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JLabel ownerNameLabel;
    private javax.swing.JTextArea ownerNameTextArea;
    private javax.swing.JLabel petAgeLabel;
    private javax.swing.JButton petButton;
    private javax.swing.JLabel petNameLabel;
    private javax.swing.JTextArea petNameTextArea;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton sleepButton;
    private javax.swing.JButton takeWalkButton;
    private javax.swing.JLabel titleOfGui;
    private javax.swing.JLabel yourPetTitle;
    private JButton[] buttons;
    // End of variables declaration                  

}
